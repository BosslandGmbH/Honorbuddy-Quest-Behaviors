// Behavior originally contributed by HighVoltz.
//
// LICENSE:
// This work is licensed under the
//     Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.
// also known as CC-BY-NC-SA.  To view a copy of this license, visit
//      http://creativecommons.org/licenses/by-nc-sa/3.0/
// or send a letter to
//      Creative Commons // 171 Second Street, Suite 300 // San Francisco, California, 94105, USA.

#region Summary and Documentation

/* 
	 RunCode has the following characteristics:
	  * It can run C# statements and coroutines.
	  * It can define functions, classes or any other types 

	BEHAVIOR LIMITATIONS:
		Any type, variable and function definition cannot easily be accessed from a <If/While Condition />
		because they're placed in different namespaces and classes and the code generated by RunCode is 
		placed inside long namespace and in a somewhat obscure class name
 
	BEHAVIOR ATTRIBUTES:
		Type [optional; Default: Statement]
			This argument specifies whether the code is a statement or a  type/function definition
  
		Code [optional]
			This is the CSharp code. This attribute is optional because code can also be placed inside a CDATA node 
			Whats nice about using a CDATA node is you don't need to use xml escapes for <, >, ', " and &
 
	BEHAVIOR ELEMENTS:
		CDATA [optional]
			Code placed inside this element does not need to be escaped. 
			The Code attribute must be left out for this element to be used.
			See the examples.
 
 */

#endregion

#region Examples

/*
	This is an example of how this behavior can be used to stop the bot, very basic.
	You can leave out the semicolon at the end on single line statements if you want. 
 
	<CustomBehavior File="RunCode" Code="TreeRoot.Stop()">
 
	The following is an example that shows how to define a function, not very useful.

        <CustomBehavior File="RunCode" Type="Definition"><![CDATA[ 
                void Log(string format, params object[] args)
                {
                    Logging.Write(Colors.Green, Path.GetFileNameWithoutExtension(ProfileManager.XmlLocation)+": " + format, args);
                }
            ]]></CustomBehavior>

    The statements are executed inside a Honorbuddy coroutine function so this makes it possible to 
    create your own coroutine or execute coroutines elsewhere
 
    
  
 */

#endregion

#region Usings

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Xml;
using System.Xml.Linq;
using CommonBehaviors.Actions;
using Styx.Common;
using Styx.CommonBot.Profiles;
using Styx.CommonBot.Profiles.Quest.Order;
using Styx.Pathing;
using Styx.TreeSharp;

#endregion

namespace Honorbuddy.Quest_Behaviors
{
    [CustomBehaviorFileName(@"RunCode")]
    public class RunCode : CustomForcedBehavior
    {
        // static field members

        #region Consructor and Argument Processing

        public RunCode(Dictionary<string, string> args)
            : base(args)
        {
            try
            {
                // Parameters dealing with 'starting' the behavior...
				var code  = GetAttributeAs<string>("Code", false, null, null);
				if (code == null)
				{
					var cData = Element.DescendantNodes().OfType<XCData>().FirstOrDefault();
					if (cData != null)
						code = cData.Value;
				}

				Type = GetAttributeAsNullable<CodeType>("Type", false, null, null) ?? CodeType.Statement;

				if (!string.IsNullOrEmpty(code))
	            {
		            if (Type == CodeType.Definition)
		            {
			            Code = code;
		            }
		            else
		            {
			            code = code.Trim();
						if (code.Last() != ';')
							code += ";";
			            CoroutineProducerProducer = new DelayCompiledExpression<Func<Task>>("async () =>{" + code + "}");
		            }
	            }


	            QuestId = GetAttributeAsNullable<int>("QuestId", false, ConstrainAs.QuestId(this), null) ?? 0;
                QuestRequirementComplete =
                    GetAttributeAsNullable<QuestCompleteRequirement>("QuestCompleteRequirement", false, null, null) ??
                    QuestCompleteRequirement.NotComplete;
                QuestRequirementInLog =
                    GetAttributeAsNullable<QuestInLogRequirement>("QuestInLogRequirement", false, null, null) ??
                    QuestInLogRequirement.InLog;
            }

            catch (Exception except)
            {
                // Maintenance problems occur for a number of reasons.  The primary two are...
                // * Changes were made to the behavior, and boundary conditions weren't properly tested.
                // * The Honorbuddy core was changed, and the behavior wasn't adjusted for the new changes.
                // In any case, we pinpoint the source of the problem area here, and hopefully it can be quickly
                // resolved.
                LogMessage(
                    "error",
                    "BEHAVIOR MAINTENANCE PROBLEM: " + except.Message
                    + "\nFROM HERE:\n"
                    + except.StackTrace + "\n");
                IsAttributeProblem = true;
            }
        }
		// Variables for Attributes provided by caller
		[CompileString]
		public string Code { get; private set; }

		[CompileExpression]
		public DelayCompiledExpression<Func<Task>> CoroutineProducerProducer { get; private set; }

        private CodeType Type { get; set; }
        private int QuestId { get; set; }
        public QuestCompleteRequirement QuestRequirementComplete { get; private set; }
        public QuestInLogRequirement QuestRequirementInLog { get; private set; }

        // DON'T EDIT THESE--they are auto-populated by Subversion
        public override string SubversionId
        {
            get { return "$Id: GetOutOfGroundEffectAndAuras.cs 304 2013-02-06 05:19:13Z chinajade $"; }
        }

        public override string SubversionRevision { get { return "$Rev: 304 $"; } }

        #endregion

        #region Private and Convenience variables

        private bool _isBehaviorDone;


        #endregion

        #region Overrides of CustomForcedBehavior

        public override void OnStart()
        {

            if (Type == CodeType.Definition)
            {
                _isBehaviorDone = true;
            }
        }

        public override bool IsDone
        {
            get
            {
                return (_isBehaviorDone // normal completion
                        || !UtilIsProgressRequirementsMet(QuestId, QuestRequirementInLog, QuestRequirementComplete));
            }
        }


        #endregion

        #region Behavior

        protected override Composite CreateBehavior()
        {
            return new ActionRunCoroutine(ctx => MainCoroutine());
        }

        private async Task<bool> MainCoroutine()
        {
            if (IsDone || Type == CodeType.Definition)
                return false;

			await CoroutineProducerProducer.CallableExpression();
            _isBehaviorDone = true;
            return true;
        }


        #endregion

        #region Embedded Types

        public enum CodeType
        {
            // code is placed in a function that returns an async Task.
            Statement,
            // code is placed inside the body of a class. 
            Definition,
        }

        #endregion
    }
}

